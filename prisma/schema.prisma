// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("SUPABASE_DATABASE_URL")
  directUrl = env("SUPABASE_DIRECT_URL")
}

model User {
  id            String    @id @default(uuid()) @db.Uuid
  name          String?   @db.Text
  email         String?   @unique @db.Text
  emailVerified DateTime?
  image         String?   @db.Text
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  points        Int       @default(0)

  // Relations
  feedItems          FeedItem[]
  preferences        Preferences?
  accounts           Account[]
  sessions           Session[]
  quizParticipations QuizParticipant[]
  quizResults        QuizResult[]
  addedFeeds         Feed[] @relation("AddedFeeds")
  subscribedFeeds    Feed[] @relation("SubscribedFeeds")
}

enum FeedCategory {
  PROGRAMMING
  DEVOPS
  WEB_DEVELOPMENT
  MOBILE
  AI_ML
  CLOUD
  SECURITY
  BLOCKCHAIN
  DATA_SCIENCE
  GENERAL
}

enum FeedStatus {
  PENDING
  APPROVED
  REJECTED
}

model Feed {
  id          String     @id @default(uuid()) @db.Uuid
  url         String     @unique
  title       String?
  description String?
  categories  FeedCategory[]
  status      FeedStatus @default(PENDING)
  addedBy     String     @db.Uuid
  lastFetched DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  items         FeedItem[]
  user          User       @relation("AddedFeeds", fields: [addedBy], references: [id])
  subscribers   User[]     @relation("SubscribedFeeds")

  @@index([addedBy])
}

model FeedItem {
  id            String    @id @default(uuid()) @db.Uuid
  feedId        String    @db.Uuid
  userId        String    @db.Uuid
  title         String    @db.Text
  description   String?   @db.Text
  link          String    @db.Text
  pubDate       DateTime
  author        String?   @db.Text
  content       String?   @db.Text
  category      FeedCategory @default(GENERAL)
  categories    FeedCategory[] @default([])
  readingTime   Int?
  readStartTime DateTime?
  readEndTime   DateTime?
  isRead        Boolean   @default(false)
  isSaved       Boolean   @default(false)
  createdAt     DateTime  @default(now())

  // Relations
  feed Feed @relation(fields: [feedId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([feedId])
  @@index([userId])
  @@index([isRead])
  @@index([isSaved])
}

model Preferences {
  id           String   @id @default(uuid()) @db.Uuid
  userId       String   @unique @db.Uuid
  categories   FeedCategory[] @default([])
  readingLevel String   @default("beginner") @db.Text
  theme        String   @default("system") @db.Text
  emailDigest  Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  subscribedCategories FeedCategory[] @default([])
  onboardingCompleted Boolean @default(false)

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// NextAuth Models
model Account {
  id                String  @id @default(uuid()) @db.Uuid
  userId            String  @db.Uuid
  type              String  @db.Text
  provider          String  @db.Text
  providerAccountId String  @db.Text
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String? @db.Text
  scope             String? @db.Text
  id_token          String? @db.Text
  session_state     String? @db.Text

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid()) @db.Uuid
  sessionToken String   @unique @db.Text
  userId       String   @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String   @db.Text
  token      String   @unique @db.Text
  expires    DateTime

  @@unique([identifier, token])
}

model QuizCompetition {
  id          String    @id @default(uuid()) @db.Uuid
  articleId   String    @db.Uuid
  status      String    @default("waiting") @db.Text
  startTime   DateTime  @default(now())
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  participants QuizParticipant[]
}

model QuizParticipant {
  id            String    @id @default(uuid()) @db.Uuid
  userId        String    @db.Uuid
  competitionId String    @db.Uuid
  score         Int       @default(0)
  completedAt   DateTime?
  createdAt     DateTime  @default(now())

  competition QuizCompetition @relation(fields: [competitionId], references: [id], onDelete: Cascade)
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([competitionId])
  @@index([userId])
}

model QuizResult {
  id          String   @id @default(cuid())
  userId      String   @db.Uuid
  articleId   String   @db.Uuid
  score       Int
  completedAt DateTime

  // Add the relation to User
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("quiz_results")
}
