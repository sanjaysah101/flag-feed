// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(uuid()) @db.Uuid
  name          String?   @db.Text
  email         String?   @unique @db.Text
  emailVerified DateTime?
  image         String?   @db.Text
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  points        Int       @default(0)

  // Relations
  feeds       Feed[]
  feedItems   FeedItem[]
  preferences Preferences?
  accounts    Account[]
  sessions    Session[]
}

enum FeedCategory {
  PROGRAMMING
  DEVOPS
  WEB_DEVELOPMENT
  MOBILE
  AI_ML
  CLOUD
  SECURITY
  BLOCKCHAIN
  DATA_SCIENCE
}

model Feed {
  id          String       @id @default(uuid()) @db.Uuid
  url         String      @db.Text
  title       String      @db.Text
  description String?     @db.Text
  category    FeedCategory
  userId      String      @db.Uuid
  lastFetched DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  user  User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items FeedItem[]
}

model FeedItem {
  id          String   @id @default(uuid()) @db.Uuid
  title       String   @db.Text
  description String   @db.Text
  link        String   @db.Text
  pubDate     DateTime
  author      String?  @db.Text
  content     String?  @db.Text
  isRead      Boolean  @default(false)
  isSaved     Boolean  @default(false)
  createdAt   DateTime @default(now())

  // Relations
  feed   Feed   @relation(fields: [feedId], references: [id], onDelete: Cascade)
  feedId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.Uuid

  @@index([feedId])
  @@index([userId])
  @@index([isRead])
  @@index([isSaved])
}

model Preferences {
  id           String   @id @default(uuid()) @db.Uuid
  categories   String[] @db.Text
  readingLevel String   @default("beginner") @db.Text
  theme        String   @default("system") @db.Text
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @db.Uuid
}

// NextAuth Models
model Account {
  id                String  @id @default(uuid()) @db.Uuid
  userId            String  @db.Uuid
  type              String  @db.Text
  provider          String  @db.Text
  providerAccountId String  @db.Text
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String? @db.Text
  scope             String? @db.Text
  id_token          String? @db.Text
  session_state     String? @db.Text

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid()) @db.Uuid
  sessionToken String   @unique @db.Text
  userId       String   @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String   @db.Text
  token      String   @unique @db.Text
  expires    DateTime

  @@unique([identifier, token])
}
